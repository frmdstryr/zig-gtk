// This file is auto generated do not edit
const std = @import("std");
const c = @import("c.zig");

pub const MAXINT = c.G_MAXINT;
pub const MAXINT16 = c.G_MAXINT16;
pub const MAXINT32 = c.G_MAXINT32;
pub const MAXINT64 = c.G_MAXINT64;
pub const MAXINT8 = c.G_MAXINT8;
pub const MAXLONG = c.G_MAXLONG;
pub const MAXOFFSET = c.G_MAXOFFSET;
pub const MAXSHORT = c.G_MAXSHORT;
// pub const MAXSIZE = c.G_MAXSIZE;
pub const MAXSSIZE = c.G_MAXSSIZE;
// pub const MAXUINT = c.G_MAXUINT;
pub const MAXUINT16 = c.G_MAXUINT16;
pub const MAXUINT32 = c.G_MAXUINT32;
pub const MAXUINT64 = c.G_MAXUINT64;
pub const MAXUINT8 = c.G_MAXUINT8;
// pub const MAXULONG = c.G_MAXULONG;
pub const MAXUSHORT = c.G_MAXUSHORT;
pub const MININT = c.G_MININT;
pub const MININT16 = c.G_MININT16;
pub const MININT32 = c.G_MININT32;
pub const MININT64 = c.G_MININT64;
pub const MININT8 = c.G_MININT8;
pub const MINLONG = c.G_MINLONG;
pub const MINOFFSET = c.G_MINOFFSET;
pub const MINSHORT = c.G_MINSHORT;
pub const MINSSIZE = c.G_MINSSIZE;
pub const IO_ERR = c.G_IO_ERR;
pub const IO_FLAG_APPEND = c.G_IO_FLAG_APPEND;
pub const IO_FLAG_GET_MASK = c.G_IO_FLAG_GET_MASK;
pub const IO_FLAG_IS_READABLE = c.G_IO_FLAG_IS_READABLE;
pub const IO_FLAG_IS_SEEKABLE = c.G_IO_FLAG_IS_SEEKABLE;
pub const IO_FLAG_IS_WRITEABLE = c.G_IO_FLAG_IS_WRITEABLE;
pub const IO_FLAG_MASK = c.G_IO_FLAG_MASK;
pub const IO_FLAG_NONBLOCK = c.G_IO_FLAG_NONBLOCK;
pub const IO_FLAG_SET_MASK = c.G_IO_FLAG_SET_MASK;
pub const IO_HUP = c.G_IO_HUP;
pub const IO_IN = c.G_IO_IN;
pub const IO_NVAL = c.G_IO_NVAL;
pub const IO_OUT = c.G_IO_OUT;
pub const IO_PRI = c.G_IO_PRI;
pub const IO_STATUS_AGAIN = c.G_IO_STATUS_AGAIN;
pub const IO_STATUS_EOF = c.G_IO_STATUS_EOF;
pub const IO_STATUS_ERROR = c.G_IO_STATUS_ERROR;
pub const IO_STATUS_NORMAL = c.G_IO_STATUS_NORMAL;
pub const OPTION_ERROR_BAD_VALUE = c.G_OPTION_ERROR_BAD_VALUE;
pub const OPTION_ERROR_FAILED = c.G_OPTION_ERROR_FAILED;
pub const OPTION_ERROR_UNKNOWN_OPTION = c.G_OPTION_ERROR_UNKNOWN_OPTION;
pub const OPTION_FLAG_FILENAME = c.G_OPTION_FLAG_FILENAME;
pub const OPTION_FLAG_HIDDEN = c.G_OPTION_FLAG_HIDDEN;
pub const OPTION_FLAG_IN_MAIN = c.G_OPTION_FLAG_IN_MAIN;
pub const OPTION_FLAG_NOALIAS = c.G_OPTION_FLAG_NOALIAS;
pub const OPTION_FLAG_NO_ARG = c.G_OPTION_FLAG_NO_ARG;
pub const OPTION_FLAG_OPTIONAL_ARG = c.G_OPTION_FLAG_OPTIONAL_ARG;
pub const OPTION_FLAG_REVERSE = c.G_OPTION_FLAG_REVERSE;
pub const OPTION_REMAINING = c.G_OPTION_REMAINING;
pub const PARAM_CONSTRUCT = c.G_PARAM_CONSTRUCT;
pub const PARAM_CONSTRUCT_ONLY = c.G_PARAM_CONSTRUCT_ONLY;
pub const PARAM_LAX_VALIDATION = c.G_PARAM_LAX_VALIDATION;
pub const PARAM_MASK = c.G_PARAM_MASK;
pub const PARAM_READABLE = c.G_PARAM_READABLE;
pub const PARAM_READWRITE = c.G_PARAM_READWRITE;
pub const PARAM_STATIC_STRINGS = c.G_PARAM_STATIC_STRINGS;
pub const PARAM_USER_SHIFT = c.G_PARAM_USER_SHIFT;
pub const PARAM_WRITABLE = c.G_PARAM_WRITABLE;
pub const PRIORITY_DEFAULT = c.G_PRIORITY_DEFAULT;
pub const PRIORITY_DEFAULT_IDLE = c.G_PRIORITY_DEFAULT_IDLE;
pub const PRIORITY_HIGH = c.G_PRIORITY_HIGH;
pub const PRIORITY_HIGH_IDLE = c.G_PRIORITY_HIGH_IDLE;
pub const PRIORITY_LOW = c.G_PRIORITY_LOW;
pub const SIGNAL_ACTION = c.G_SIGNAL_ACTION;
pub const SIGNAL_DETAILED = c.G_SIGNAL_DETAILED;
pub const SIGNAL_FLAGS_MASK = c.G_SIGNAL_FLAGS_MASK;
pub const SIGNAL_MATCH_MASK = c.G_SIGNAL_MATCH_MASK;
pub const SIGNAL_NO_HOOKS = c.G_SIGNAL_NO_HOOKS;
pub const SIGNAL_NO_RECURSE = c.G_SIGNAL_NO_RECURSE;
pub const SIGNAL_RUN_CLEANUP = c.G_SIGNAL_RUN_CLEANUP;
pub const SIGNAL_RUN_FIRST = c.G_SIGNAL_RUN_FIRST;
pub const SIGNAL_RUN_LAST = c.G_SIGNAL_RUN_LAST;
pub const SPAWN_CHILD_INHERITS_STDIN = c.G_SPAWN_CHILD_INHERITS_STDIN;
pub const SPAWN_DO_NOT_REAP_CHILD = c.G_SPAWN_DO_NOT_REAP_CHILD;
pub const SPAWN_FILE_AND_ARGV_ZERO = c.G_SPAWN_FILE_AND_ARGV_ZERO;
pub const SPAWN_LEAVE_DESCRIPTORS_OPEN = c.G_SPAWN_LEAVE_DESCRIPTORS_OPEN;
pub const SPAWN_SEARCH_PATH = c.G_SPAWN_SEARCH_PATH;
pub const SPAWN_STDERR_TO_DEV_NULL = c.G_SPAWN_STDERR_TO_DEV_NULL;
pub const SPAWN_STDOUT_TO_DEV_NULL = c.G_SPAWN_STDOUT_TO_DEV_NULL;
pub const TYPE_FLAG_RESERVED_ID_BIT = c.G_TYPE_FLAG_RESERVED_ID_BIT;
pub const TYPE_FUNDAMENTAL_MAX = c.G_TYPE_FUNDAMENTAL_MAX;
pub const TYPE_FUNDAMENTAL_SHIFT = c.G_TYPE_FUNDAMENTAL_SHIFT;
pub const TYPE_RESERVED_BSE_FIRST = c.G_TYPE_RESERVED_BSE_FIRST;
pub const TYPE_RESERVED_BSE_LAST = c.G_TYPE_RESERVED_BSE_LAST;
pub const TYPE_RESERVED_GLIB_FIRST = c.G_TYPE_RESERVED_GLIB_FIRST;
pub const TYPE_RESERVED_GLIB_LAST = c.G_TYPE_RESERVED_GLIB_LAST;
pub const TYPE_RESERVED_USER_FIRST = c.G_TYPE_RESERVED_USER_FIRST;
// pub const VALUE_INTERNED_STRING = c.G_VALUE_INTERNED_STRING;
pub const VALUE_NOCOPY_CONTENTS = c.G_VALUE_NOCOPY_CONTENTS;

test {
    std.testing.refAllDecls(@This());
}