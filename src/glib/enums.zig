// This file is auto generated do not edit
const std = @import("std");
const c = @import("c.zig");

pub const BookmarkFileError = enum(c_int) {
    AppNotRegistered = c.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED,
    FileNotFound = c.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND,
    InvalidUri = c.G_BOOKMARK_FILE_ERROR_INVALID_URI,
    InvalidValue = c.G_BOOKMARK_FILE_ERROR_INVALID_VALUE,
    Read = c.G_BOOKMARK_FILE_ERROR_READ,
    UnknownEncoding = c.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING,
    UriNotFound = c.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND,
    Write = c.G_BOOKMARK_FILE_ERROR_WRITE,
};

pub const ChecksumType = enum(c_int) {
    Md5 = c.G_CHECKSUM_MD5,
    Sha1 = c.G_CHECKSUM_SHA1,
    Sha256 = c.G_CHECKSUM_SHA256,
    Sha384 = c.G_CHECKSUM_SHA384,
    Sha512 = c.G_CHECKSUM_SHA512,
};

pub const ConvertError = enum(c_int) {
    BadUri = c.G_CONVERT_ERROR_BAD_URI,
    EmbeddedNul = c.G_CONVERT_ERROR_EMBEDDED_NUL,
    Failed = c.G_CONVERT_ERROR_FAILED,
    IllegalSequence = c.G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
    NotAbsolutePath = c.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH,
    NoConversion = c.G_CONVERT_ERROR_NO_CONVERSION,
    NoMemory = c.G_CONVERT_ERROR_NO_MEMORY,
    PartialInput = c.G_CONVERT_ERROR_PARTIAL_INPUT,
};

pub const DateDMY = enum(c_int) {
    Day = c.G_DATE_DAY,
    Month = c.G_DATE_MONTH,
    Year = c.G_DATE_YEAR,
};

pub const DateMonth = enum(c_int) {
    April = c.G_DATE_APRIL,
    August = c.G_DATE_AUGUST,
    BadMonth = c.G_DATE_BAD_MONTH,
    December = c.G_DATE_DECEMBER,
    February = c.G_DATE_FEBRUARY,
    January = c.G_DATE_JANUARY,
    July = c.G_DATE_JULY,
    June = c.G_DATE_JUNE,
    March = c.G_DATE_MARCH,
    May = c.G_DATE_MAY,
    November = c.G_DATE_NOVEMBER,
    October = c.G_DATE_OCTOBER,
    September = c.G_DATE_SEPTEMBER,
};

pub const DateWeekday = enum(c_int) {
    BadWeekday = c.G_DATE_BAD_WEEKDAY,
    Friday = c.G_DATE_FRIDAY,
    Monday = c.G_DATE_MONDAY,
    Saturday = c.G_DATE_SATURDAY,
    Sunday = c.G_DATE_SUNDAY,
    Thursday = c.G_DATE_THURSDAY,
    Tuesday = c.G_DATE_TUESDAY,
    Wednesday = c.G_DATE_WEDNESDAY,
};

pub const ErrorType = enum(c_int) {
    DigitRadix = c.G_ERR_DIGIT_RADIX,
    FloatMalformed = c.G_ERR_FLOAT_MALFORMED,
    FloatRadix = c.G_ERR_FLOAT_RADIX,
    NonDigitInConst = c.G_ERR_NON_DIGIT_IN_CONST,
    UnexpEof = c.G_ERR_UNEXP_EOF,
    UnexpEofInComment = c.G_ERR_UNEXP_EOF_IN_COMMENT,
    UnexpEofInString = c.G_ERR_UNEXP_EOF_IN_STRING,
    Unknown = c.G_ERR_UNKNOWN,
};

pub const FileError = enum(c_int) {
    Acces = c.G_FILE_ERROR_ACCES,
    Again = c.G_FILE_ERROR_AGAIN,
    Badf = c.G_FILE_ERROR_BADF,
    Exist = c.G_FILE_ERROR_EXIST,
    Failed = c.G_FILE_ERROR_FAILED,
    Fault = c.G_FILE_ERROR_FAULT,
    Intr = c.G_FILE_ERROR_INTR,
    Inval = c.G_FILE_ERROR_INVAL,
    Io = c.G_FILE_ERROR_IO,
    Isdir = c.G_FILE_ERROR_ISDIR,
    Loop = c.G_FILE_ERROR_LOOP,
    Mfile = c.G_FILE_ERROR_MFILE,
    Nametoolong = c.G_FILE_ERROR_NAMETOOLONG,
    Nfile = c.G_FILE_ERROR_NFILE,
    Nodev = c.G_FILE_ERROR_NODEV,
    Noent = c.G_FILE_ERROR_NOENT,
    Nomem = c.G_FILE_ERROR_NOMEM,
    Nospc = c.G_FILE_ERROR_NOSPC,
    Nosys = c.G_FILE_ERROR_NOSYS,
    Notdir = c.G_FILE_ERROR_NOTDIR,
    Nxio = c.G_FILE_ERROR_NXIO,
    Perm = c.G_FILE_ERROR_PERM,
    Pipe = c.G_FILE_ERROR_PIPE,
    Rofs = c.G_FILE_ERROR_ROFS,
    Txtbsy = c.G_FILE_ERROR_TXTBSY,
};

pub const IOChannelError = enum(c_int) {
    Failed = c.G_IO_CHANNEL_ERROR_FAILED,
    Fbig = c.G_IO_CHANNEL_ERROR_FBIG,
    Inval = c.G_IO_CHANNEL_ERROR_INVAL,
    Io = c.G_IO_CHANNEL_ERROR_IO,
    Isdir = c.G_IO_CHANNEL_ERROR_ISDIR,
    Nospc = c.G_IO_CHANNEL_ERROR_NOSPC,
    Nxio = c.G_IO_CHANNEL_ERROR_NXIO,
    Overflow = c.G_IO_CHANNEL_ERROR_OVERFLOW,
    Pipe = c.G_IO_CHANNEL_ERROR_PIPE,
};

pub const IOError = enum(c_int) {
    Again = c.G_IO_ERROR_AGAIN,
    Inval = c.G_IO_ERROR_INVAL,
    None = c.G_IO_ERROR_NONE,
    Unknown = c.G_IO_ERROR_UNKNOWN,
};

pub const IOStatus = enum(c_int) {
    Again = c.G_IO_STATUS_AGAIN,
    Eof = c.G_IO_STATUS_EOF,
    Error = c.G_IO_STATUS_ERROR,
    Normal = c.G_IO_STATUS_NORMAL,
};

pub const KeyFileError = enum(c_int) {
    GroupNotFound = c.G_KEY_FILE_ERROR_GROUP_NOT_FOUND,
    InvalidValue = c.G_KEY_FILE_ERROR_INVALID_VALUE,
    KeyNotFound = c.G_KEY_FILE_ERROR_KEY_NOT_FOUND,
    NotFound = c.G_KEY_FILE_ERROR_NOT_FOUND,
    Parse = c.G_KEY_FILE_ERROR_PARSE,
    UnknownEncoding = c.G_KEY_FILE_ERROR_UNKNOWN_ENCODING,
};

pub const LogWriterOutput = enum(c_int) {
    Handled = c.G_LOG_WRITER_HANDLED,
    Unhandled = c.G_LOG_WRITER_UNHANDLED,
};

pub const MarkupError = enum(c_int) {
    BadUtf8 = c.G_MARKUP_ERROR_BAD_UTF8,
    Empty = c.G_MARKUP_ERROR_EMPTY,
    InvalidContent = c.G_MARKUP_ERROR_INVALID_CONTENT,
    MissingAttribute = c.G_MARKUP_ERROR_MISSING_ATTRIBUTE,
    Parse = c.G_MARKUP_ERROR_PARSE,
    UnknownAttribute = c.G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
    UnknownElement = c.G_MARKUP_ERROR_UNKNOWN_ELEMENT,
};

pub const NormalizeMode = enum(c_int) {
    All = c.G_NORMALIZE_ALL,
    AllCompose = c.G_NORMALIZE_ALL_COMPOSE,
    Default = c.G_NORMALIZE_DEFAULT,
    DefaultCompose = c.G_NORMALIZE_DEFAULT_COMPOSE,
    // Nfc = c.G_NORMALIZE_DEFAULT_COMPOSE,
    // Nfd = c.G_NORMALIZE_DEFAULT,
    // Nfkc = c.G_NORMALIZE_ALL_COMPOSE,
    // Nfkd = c.G_NORMALIZE_ALL,
};

pub const NumberParserError = enum(c_int) {
    Invalid = c.G_NUMBER_PARSER_ERROR_INVALID,
    OutOfBounds = c.G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS,
};

pub const OnceStatus = enum(c_int) {
    Notcalled = c.G_ONCE_STATUS_NOTCALLED,
    Progress = c.G_ONCE_STATUS_PROGRESS,
    Ready = c.G_ONCE_STATUS_READY,
};

pub const OptionArg = enum(c_int) {
    Callback = c.G_OPTION_ARG_CALLBACK,
    Double = c.G_OPTION_ARG_DOUBLE,
    Filename = c.G_OPTION_ARG_FILENAME,
    FilenameArray = c.G_OPTION_ARG_FILENAME_ARRAY,
    Int = c.G_OPTION_ARG_INT,
    Int64 = c.G_OPTION_ARG_INT64,
    None = c.G_OPTION_ARG_NONE,
    String = c.G_OPTION_ARG_STRING,
    StringArray = c.G_OPTION_ARG_STRING_ARRAY,
};

pub const OptionError = enum(c_int) {
    BadValue = c.G_OPTION_ERROR_BAD_VALUE,
    Failed = c.G_OPTION_ERROR_FAILED,
    UnknownOption = c.G_OPTION_ERROR_UNKNOWN_OPTION,
};

pub const RegexError = enum(c_int) {
    AssertionExpected = c.G_REGEX_ERROR_ASSERTION_EXPECTED,
    BacktrackingControlVerbArgumentForbidden = c.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN,
    BacktrackingControlVerbArgumentRequired = c.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED,
    CharacterValueTooLarge = c.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE,
    Compile = c.G_REGEX_ERROR_COMPILE,
    DefineRepetion = c.G_REGEX_ERROR_DEFINE_REPETION,
    DuplicateSubpatternName = c.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME,
    ExpressionTooLarge = c.G_REGEX_ERROR_EXPRESSION_TOO_LARGE,
    ExtraSubpatternName = c.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME,
    HexCodeTooLarge = c.G_REGEX_ERROR_HEX_CODE_TOO_LARGE,
    InconsistentNewlineOptions = c.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS,
    InexistentSubpatternReference = c.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE,
    InfiniteLoop = c.G_REGEX_ERROR_INFINITE_LOOP,
    Internal = c.G_REGEX_ERROR_INTERNAL,
    InvalidCondition = c.G_REGEX_ERROR_INVALID_CONDITION,
    InvalidControlChar = c.G_REGEX_ERROR_INVALID_CONTROL_CHAR,
    InvalidDataCharacter = c.G_REGEX_ERROR_INVALID_DATA_CHARACTER,
    InvalidEscapeInCharacterClass = c.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS,
    InvalidOctalValue = c.G_REGEX_ERROR_INVALID_OCTAL_VALUE,
    InvalidRelativeReference = c.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE,
    MalformedCondition = c.G_REGEX_ERROR_MALFORMED_CONDITION,
    MalformedProperty = c.G_REGEX_ERROR_MALFORMED_PROPERTY,
    Match = c.G_REGEX_ERROR_MATCH,
    MemoryError = c.G_REGEX_ERROR_MEMORY_ERROR,
    MissingBackReference = c.G_REGEX_ERROR_MISSING_BACK_REFERENCE,
    MissingControlChar = c.G_REGEX_ERROR_MISSING_CONTROL_CHAR,
    MissingDigit = c.G_REGEX_ERROR_MISSING_DIGIT,
    MissingName = c.G_REGEX_ERROR_MISSING_NAME,
    MissingSubpatternName = c.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME,
    MissingSubpatternNameTerminator = c.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR,
    NameTooLong = c.G_REGEX_ERROR_NAME_TOO_LONG,
    NothingToRepeat = c.G_REGEX_ERROR_NOTHING_TO_REPEAT,
    NotSupportedInClass = c.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS,
    NumberTooBig = c.G_REGEX_ERROR_NUMBER_TOO_BIG,
    Optimize = c.G_REGEX_ERROR_OPTIMIZE,
    PosixCollatingElementsNotSupported = c.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED,
    PosixNamedClassOutsideClass = c.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS,
    QuantifiersOutOfOrder = c.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER,
    QuantifierTooBig = c.G_REGEX_ERROR_QUANTIFIER_TOO_BIG,
    RangeOutOfOrder = c.G_REGEX_ERROR_RANGE_OUT_OF_ORDER,
    Replace = c.G_REGEX_ERROR_REPLACE,
    SingleByteMatchInLookbehind = c.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND,
    StrayBackslash = c.G_REGEX_ERROR_STRAY_BACKSLASH,
    SubpatternNameTooLong = c.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG,
    TooManyBranchesInDefine = c.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE,
    TooManyConditionalBranches = c.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES,
    TooManyForwardReferences = c.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES,
    TooManySubpatterns = c.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS,
    UnknownBacktrackingControlVerb = c.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB,
    UnknownPosixClassName = c.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME,
    UnknownProperty = c.G_REGEX_ERROR_UNKNOWN_PROPERTY,
    UnmatchedParenthesis = c.G_REGEX_ERROR_UNMATCHED_PARENTHESIS,
    UnrecognizedCharacter = c.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER,
    UnrecognizedEscape = c.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE,
    UnterminatedCharacterClass = c.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS,
    UnterminatedComment = c.G_REGEX_ERROR_UNTERMINATED_COMMENT,
    VariableLengthLookbehind = c.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND,
};

pub const SeekType = enum(c_int) {
    Cur = c.G_SEEK_CUR,
    End = c.G_SEEK_END,
    Set = c.G_SEEK_SET,
};

pub const ShellError = enum(c_int) {
    BadQuoting = c.G_SHELL_ERROR_BAD_QUOTING,
    EmptyString = c.G_SHELL_ERROR_EMPTY_STRING,
    Failed = c.G_SHELL_ERROR_FAILED,
};

pub const SliceConfig = enum(c_int) {
    AlwaysMalloc = c.G_SLICE_CONFIG_ALWAYS_MALLOC,
    BypassMagazines = c.G_SLICE_CONFIG_BYPASS_MAGAZINES,
    ChunkSizes = c.G_SLICE_CONFIG_CHUNK_SIZES,
    ColorIncrement = c.G_SLICE_CONFIG_COLOR_INCREMENT,
    ContentionCounter = c.G_SLICE_CONFIG_CONTENTION_COUNTER,
    WorkingSetMsecs = c.G_SLICE_CONFIG_WORKING_SET_MSECS,
};

pub const SpawnError = enum(c_int) {
    Acces = c.G_SPAWN_ERROR_ACCES,
    Chdir = c.G_SPAWN_ERROR_CHDIR,
    Failed = c.G_SPAWN_ERROR_FAILED,
    Fork = c.G_SPAWN_ERROR_FORK,
    Inval = c.G_SPAWN_ERROR_INVAL,
    Io = c.G_SPAWN_ERROR_IO,
    Isdir = c.G_SPAWN_ERROR_ISDIR,
    Libbad = c.G_SPAWN_ERROR_LIBBAD,
    Loop = c.G_SPAWN_ERROR_LOOP,
    Mfile = c.G_SPAWN_ERROR_MFILE,
    Nametoolong = c.G_SPAWN_ERROR_NAMETOOLONG,
    Nfile = c.G_SPAWN_ERROR_NFILE,
    Noent = c.G_SPAWN_ERROR_NOENT,
    Noexec = c.G_SPAWN_ERROR_NOEXEC,
    Nomem = c.G_SPAWN_ERROR_NOMEM,
    Notdir = c.G_SPAWN_ERROR_NOTDIR,
    Perm = c.G_SPAWN_ERROR_PERM,
    Read = c.G_SPAWN_ERROR_READ,
    TooBig = c.G_SPAWN_ERROR_TOO_BIG,
    Txtbusy = c.G_SPAWN_ERROR_TXTBUSY,
};

pub const TestFileType = enum(c_int) {
    Built = c.G_TEST_BUILT,
    Dist = c.G_TEST_DIST,
};

pub const TestLogType = enum(c_int) {
    Error = c.G_TEST_LOG_ERROR,
    ListCase = c.G_TEST_LOG_LIST_CASE,
    MaxResult = c.G_TEST_LOG_MAX_RESULT,
    Message = c.G_TEST_LOG_MESSAGE,
    MinResult = c.G_TEST_LOG_MIN_RESULT,
    None = c.G_TEST_LOG_NONE,
    SkipCase = c.G_TEST_LOG_SKIP_CASE,
    StartBinary = c.G_TEST_LOG_START_BINARY,
    StartCase = c.G_TEST_LOG_START_CASE,
    StartSuite = c.G_TEST_LOG_START_SUITE,
    StopCase = c.G_TEST_LOG_STOP_CASE,
    StopSuite = c.G_TEST_LOG_STOP_SUITE,
};

pub const TestResult = enum(c_int) {
    Failure = c.G_TEST_RUN_FAILURE,
    Incomplete = c.G_TEST_RUN_INCOMPLETE,
    Skipped = c.G_TEST_RUN_SKIPPED,
    Success = c.G_TEST_RUN_SUCCESS,
};

pub const ThreadError = enum(c_int) {
    ThreadErrorAgain = c.G_THREAD_ERROR_AGAIN,
};

pub const TimeType = enum(c_int) {
    Daylight = c.G_TIME_TYPE_DAYLIGHT,
    Standard = c.G_TIME_TYPE_STANDARD,
    Universal = c.G_TIME_TYPE_UNIVERSAL,
};

pub const TokenType = enum(c_int) {
    Binary = c.G_TOKEN_BINARY,
    Char = c.G_TOKEN_CHAR,
    Comma = c.G_TOKEN_COMMA,
    CommentMulti = c.G_TOKEN_COMMENT_MULTI,
    CommentSingle = c.G_TOKEN_COMMENT_SINGLE,
    Eof = c.G_TOKEN_EOF,
    EqualSign = c.G_TOKEN_EQUAL_SIGN,
    Error = c.G_TOKEN_ERROR,
    Float = c.G_TOKEN_FLOAT,
    Hex = c.G_TOKEN_HEX,
    Identifier = c.G_TOKEN_IDENTIFIER,
    IdentifierNull = c.G_TOKEN_IDENTIFIER_NULL,
    Int = c.G_TOKEN_INT,
    LeftBrace = c.G_TOKEN_LEFT_BRACE,
    LeftCurly = c.G_TOKEN_LEFT_CURLY,
    LeftParen = c.G_TOKEN_LEFT_PAREN,
    None = c.G_TOKEN_NONE,
    Octal = c.G_TOKEN_OCTAL,
    RightBrace = c.G_TOKEN_RIGHT_BRACE,
    RightCurly = c.G_TOKEN_RIGHT_CURLY,
    RightParen = c.G_TOKEN_RIGHT_PAREN,
    String = c.G_TOKEN_STRING,
    Symbol = c.G_TOKEN_SYMBOL,
};

pub const TraverseType = enum(c_int) {
    InOrder = c.G_IN_ORDER,
    LevelOrder = c.G_LEVEL_ORDER,
    PostOrder = c.G_POST_ORDER,
    PreOrder = c.G_PRE_ORDER,
};

pub const UnicodeBreakType = enum(c_int) {
    After = c.G_UNICODE_BREAK_AFTER,
    Alphabetic = c.G_UNICODE_BREAK_ALPHABETIC,
    Ambiguous = c.G_UNICODE_BREAK_AMBIGUOUS,
    Before = c.G_UNICODE_BREAK_BEFORE,
    BeforeAndAfter = c.G_UNICODE_BREAK_BEFORE_AND_AFTER,
    CarriageReturn = c.G_UNICODE_BREAK_CARRIAGE_RETURN,
    CloseParanthesis = c.G_UNICODE_BREAK_CLOSE_PARANTHESIS,
    // CloseParenthesis = c.G_UNICODE_BREAK_CLOSE_PARANTHESIS,
    ClosePunctuation = c.G_UNICODE_BREAK_CLOSE_PUNCTUATION,
    CombiningMark = c.G_UNICODE_BREAK_COMBINING_MARK,
    ComplexContext = c.G_UNICODE_BREAK_COMPLEX_CONTEXT,
    ConditionalJapaneseStarter = c.G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER,
    Contingent = c.G_UNICODE_BREAK_CONTINGENT,
    EmojiBase = c.G_UNICODE_BREAK_EMOJI_BASE,
    EmojiModifier = c.G_UNICODE_BREAK_EMOJI_MODIFIER,
    Exclamation = c.G_UNICODE_BREAK_EXCLAMATION,
    HangulLvtSyllable = c.G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE,
    HangulLvSyllable = c.G_UNICODE_BREAK_HANGUL_LV_SYLLABLE,
    HangulLJamo = c.G_UNICODE_BREAK_HANGUL_L_JAMO,
    HangulTJamo = c.G_UNICODE_BREAK_HANGUL_T_JAMO,
    HangulVJamo = c.G_UNICODE_BREAK_HANGUL_V_JAMO,
    HebrewLetter = c.G_UNICODE_BREAK_HEBREW_LETTER,
    Hyphen = c.G_UNICODE_BREAK_HYPHEN,
    Ideographic = c.G_UNICODE_BREAK_IDEOGRAPHIC,
    InfixSeparator = c.G_UNICODE_BREAK_INFIX_SEPARATOR,
    Inseparable = c.G_UNICODE_BREAK_INSEPARABLE,
    LineFeed = c.G_UNICODE_BREAK_LINE_FEED,
    Mandatory = c.G_UNICODE_BREAK_MANDATORY,
    NextLine = c.G_UNICODE_BREAK_NEXT_LINE,
    NonBreakingGlue = c.G_UNICODE_BREAK_NON_BREAKING_GLUE,
    NonStarter = c.G_UNICODE_BREAK_NON_STARTER,
    Numeric = c.G_UNICODE_BREAK_NUMERIC,
    OpenPunctuation = c.G_UNICODE_BREAK_OPEN_PUNCTUATION,
    Postfix = c.G_UNICODE_BREAK_POSTFIX,
    Prefix = c.G_UNICODE_BREAK_PREFIX,
    Quotation = c.G_UNICODE_BREAK_QUOTATION,
    RegionalIndicator = c.G_UNICODE_BREAK_REGIONAL_INDICATOR,
    Space = c.G_UNICODE_BREAK_SPACE,
    Surrogate = c.G_UNICODE_BREAK_SURROGATE,
    Symbol = c.G_UNICODE_BREAK_SYMBOL,
    Unknown = c.G_UNICODE_BREAK_UNKNOWN,
    WordJoiner = c.G_UNICODE_BREAK_WORD_JOINER,
    ZeroWidthJoiner = c.G_UNICODE_BREAK_ZERO_WIDTH_JOINER,
    ZeroWidthSpace = c.G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
};

pub const UnicodeScript = enum(c_int) {
    Adlam = c.G_UNICODE_SCRIPT_ADLAM,
    Ahom = c.G_UNICODE_SCRIPT_AHOM,
    AnatolianHieroglyphs = c.G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS,
    Arabic = c.G_UNICODE_SCRIPT_ARABIC,
    Armenian = c.G_UNICODE_SCRIPT_ARMENIAN,
    Avestan = c.G_UNICODE_SCRIPT_AVESTAN,
    Balinese = c.G_UNICODE_SCRIPT_BALINESE,
    Bamum = c.G_UNICODE_SCRIPT_BAMUM,
    BassaVah = c.G_UNICODE_SCRIPT_BASSA_VAH,
    Batak = c.G_UNICODE_SCRIPT_BATAK,
    Bengali = c.G_UNICODE_SCRIPT_BENGALI,
    Bhaiksuki = c.G_UNICODE_SCRIPT_BHAIKSUKI,
    Bopomofo = c.G_UNICODE_SCRIPT_BOPOMOFO,
    Brahmi = c.G_UNICODE_SCRIPT_BRAHMI,
    Braille = c.G_UNICODE_SCRIPT_BRAILLE,
    Buginese = c.G_UNICODE_SCRIPT_BUGINESE,
    Buhid = c.G_UNICODE_SCRIPT_BUHID,
    CanadianAboriginal = c.G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL,
    Carian = c.G_UNICODE_SCRIPT_CARIAN,
    CaucasianAlbanian = c.G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN,
    Chakma = c.G_UNICODE_SCRIPT_CHAKMA,
    Cham = c.G_UNICODE_SCRIPT_CHAM,
    Cherokee = c.G_UNICODE_SCRIPT_CHEROKEE,
    Chorasmian = c.G_UNICODE_SCRIPT_CHORASMIAN,
    Common = c.G_UNICODE_SCRIPT_COMMON,
    Coptic = c.G_UNICODE_SCRIPT_COPTIC,
    Cuneiform = c.G_UNICODE_SCRIPT_CUNEIFORM,
    Cypriot = c.G_UNICODE_SCRIPT_CYPRIOT,
    CyproMinoan = c.G_UNICODE_SCRIPT_CYPRO_MINOAN,
    Cyrillic = c.G_UNICODE_SCRIPT_CYRILLIC,
    Deseret = c.G_UNICODE_SCRIPT_DESERET,
    Devanagari = c.G_UNICODE_SCRIPT_DEVANAGARI,
    DivesAkuru = c.G_UNICODE_SCRIPT_DIVES_AKURU,
    Dogra = c.G_UNICODE_SCRIPT_DOGRA,
    Duployan = c.G_UNICODE_SCRIPT_DUPLOYAN,
    EgyptianHieroglyphs = c.G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS,
    Elbasan = c.G_UNICODE_SCRIPT_ELBASAN,
    Elymaic = c.G_UNICODE_SCRIPT_ELYMAIC,
    Ethiopic = c.G_UNICODE_SCRIPT_ETHIOPIC,
    Georgian = c.G_UNICODE_SCRIPT_GEORGIAN,
    Glagolitic = c.G_UNICODE_SCRIPT_GLAGOLITIC,
    Gothic = c.G_UNICODE_SCRIPT_GOTHIC,
    Grantha = c.G_UNICODE_SCRIPT_GRANTHA,
    Greek = c.G_UNICODE_SCRIPT_GREEK,
    Gujarati = c.G_UNICODE_SCRIPT_GUJARATI,
    GunjalaGondi = c.G_UNICODE_SCRIPT_GUNJALA_GONDI,
    Gurmukhi = c.G_UNICODE_SCRIPT_GURMUKHI,
    Han = c.G_UNICODE_SCRIPT_HAN,
    Hangul = c.G_UNICODE_SCRIPT_HANGUL,
    HanifiRohingya = c.G_UNICODE_SCRIPT_HANIFI_ROHINGYA,
    Hanunoo = c.G_UNICODE_SCRIPT_HANUNOO,
    Hatran = c.G_UNICODE_SCRIPT_HATRAN,
    Hebrew = c.G_UNICODE_SCRIPT_HEBREW,
    Hiragana = c.G_UNICODE_SCRIPT_HIRAGANA,
    ImperialAramaic = c.G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC,
    Inherited = c.G_UNICODE_SCRIPT_INHERITED,
    InscriptionalPahlavi = c.G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI,
    InscriptionalParthian = c.G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN,
    InvalidCode = c.G_UNICODE_SCRIPT_INVALID_CODE,
    Javanese = c.G_UNICODE_SCRIPT_JAVANESE,
    Kaithi = c.G_UNICODE_SCRIPT_KAITHI,
    Kannada = c.G_UNICODE_SCRIPT_KANNADA,
    Katakana = c.G_UNICODE_SCRIPT_KATAKANA,
    KayahLi = c.G_UNICODE_SCRIPT_KAYAH_LI,
    Kharoshthi = c.G_UNICODE_SCRIPT_KHAROSHTHI,
    KhitanSmallScript = c.G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT,
    Khmer = c.G_UNICODE_SCRIPT_KHMER,
    Khojki = c.G_UNICODE_SCRIPT_KHOJKI,
    Khudawadi = c.G_UNICODE_SCRIPT_KHUDAWADI,
    Lao = c.G_UNICODE_SCRIPT_LAO,
    Latin = c.G_UNICODE_SCRIPT_LATIN,
    Lepcha = c.G_UNICODE_SCRIPT_LEPCHA,
    Limbu = c.G_UNICODE_SCRIPT_LIMBU,
    LinearA = c.G_UNICODE_SCRIPT_LINEAR_A,
    LinearB = c.G_UNICODE_SCRIPT_LINEAR_B,
    Lisu = c.G_UNICODE_SCRIPT_LISU,
    Lycian = c.G_UNICODE_SCRIPT_LYCIAN,
    Lydian = c.G_UNICODE_SCRIPT_LYDIAN,
    Mahajani = c.G_UNICODE_SCRIPT_MAHAJANI,
    Makasar = c.G_UNICODE_SCRIPT_MAKASAR,
    Malayalam = c.G_UNICODE_SCRIPT_MALAYALAM,
    Mandaic = c.G_UNICODE_SCRIPT_MANDAIC,
    Manichaean = c.G_UNICODE_SCRIPT_MANICHAEAN,
    Marchen = c.G_UNICODE_SCRIPT_MARCHEN,
    MasaramGondi = c.G_UNICODE_SCRIPT_MASARAM_GONDI,
    Math = c.G_UNICODE_SCRIPT_MATH,
    Medefaidrin = c.G_UNICODE_SCRIPT_MEDEFAIDRIN,
    MeeteiMayek = c.G_UNICODE_SCRIPT_MEETEI_MAYEK,
    MendeKikakui = c.G_UNICODE_SCRIPT_MENDE_KIKAKUI,
    MeroiticCursive = c.G_UNICODE_SCRIPT_MEROITIC_CURSIVE,
    MeroiticHieroglyphs = c.G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS,
    Miao = c.G_UNICODE_SCRIPT_MIAO,
    Modi = c.G_UNICODE_SCRIPT_MODI,
    Mongolian = c.G_UNICODE_SCRIPT_MONGOLIAN,
    Mro = c.G_UNICODE_SCRIPT_MRO,
    Multani = c.G_UNICODE_SCRIPT_MULTANI,
    Myanmar = c.G_UNICODE_SCRIPT_MYANMAR,
    Nabataean = c.G_UNICODE_SCRIPT_NABATAEAN,
    Nandinagari = c.G_UNICODE_SCRIPT_NANDINAGARI,
    Newa = c.G_UNICODE_SCRIPT_NEWA,
    NewTaiLue = c.G_UNICODE_SCRIPT_NEW_TAI_LUE,
    Nko = c.G_UNICODE_SCRIPT_NKO,
    Nushu = c.G_UNICODE_SCRIPT_NUSHU,
    NyiakengPuachueHmong = c.G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG,
    Ogham = c.G_UNICODE_SCRIPT_OGHAM,
    OldHungarian = c.G_UNICODE_SCRIPT_OLD_HUNGARIAN,
    OldItalic = c.G_UNICODE_SCRIPT_OLD_ITALIC,
    OldNorthArabian = c.G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN,
    OldPermic = c.G_UNICODE_SCRIPT_OLD_PERMIC,
    OldPersian = c.G_UNICODE_SCRIPT_OLD_PERSIAN,
    OldSogdian = c.G_UNICODE_SCRIPT_OLD_SOGDIAN,
    OldSouthArabian = c.G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN,
    OldTurkic = c.G_UNICODE_SCRIPT_OLD_TURKIC,
    OldUyghur = c.G_UNICODE_SCRIPT_OLD_UYGHUR,
    OlChiki = c.G_UNICODE_SCRIPT_OL_CHIKI,
    Oriya = c.G_UNICODE_SCRIPT_ORIYA,
    Osage = c.G_UNICODE_SCRIPT_OSAGE,
    Osmanya = c.G_UNICODE_SCRIPT_OSMANYA,
    PahawhHmong = c.G_UNICODE_SCRIPT_PAHAWH_HMONG,
    Palmyrene = c.G_UNICODE_SCRIPT_PALMYRENE,
    PauCinHau = c.G_UNICODE_SCRIPT_PAU_CIN_HAU,
    PhagsPa = c.G_UNICODE_SCRIPT_PHAGS_PA,
    Phoenician = c.G_UNICODE_SCRIPT_PHOENICIAN,
    PsalterPahlavi = c.G_UNICODE_SCRIPT_PSALTER_PAHLAVI,
    Rejang = c.G_UNICODE_SCRIPT_REJANG,
    Runic = c.G_UNICODE_SCRIPT_RUNIC,
    Samaritan = c.G_UNICODE_SCRIPT_SAMARITAN,
    Saurashtra = c.G_UNICODE_SCRIPT_SAURASHTRA,
    Sharada = c.G_UNICODE_SCRIPT_SHARADA,
    Shavian = c.G_UNICODE_SCRIPT_SHAVIAN,
    Siddham = c.G_UNICODE_SCRIPT_SIDDHAM,
    Signwriting = c.G_UNICODE_SCRIPT_SIGNWRITING,
    Sinhala = c.G_UNICODE_SCRIPT_SINHALA,
    Sogdian = c.G_UNICODE_SCRIPT_SOGDIAN,
    SoraSompeng = c.G_UNICODE_SCRIPT_SORA_SOMPENG,
    Soyombo = c.G_UNICODE_SCRIPT_SOYOMBO,
    Sundanese = c.G_UNICODE_SCRIPT_SUNDANESE,
    SylotiNagri = c.G_UNICODE_SCRIPT_SYLOTI_NAGRI,
    Syriac = c.G_UNICODE_SCRIPT_SYRIAC,
    Tagalog = c.G_UNICODE_SCRIPT_TAGALOG,
    Tagbanwa = c.G_UNICODE_SCRIPT_TAGBANWA,
    TaiLe = c.G_UNICODE_SCRIPT_TAI_LE,
    TaiTham = c.G_UNICODE_SCRIPT_TAI_THAM,
    TaiViet = c.G_UNICODE_SCRIPT_TAI_VIET,
    Takri = c.G_UNICODE_SCRIPT_TAKRI,
    Tamil = c.G_UNICODE_SCRIPT_TAMIL,
    Tangsa = c.G_UNICODE_SCRIPT_TANGSA,
    Tangut = c.G_UNICODE_SCRIPT_TANGUT,
    Telugu = c.G_UNICODE_SCRIPT_TELUGU,
    Thaana = c.G_UNICODE_SCRIPT_THAANA,
    Thai = c.G_UNICODE_SCRIPT_THAI,
    Tibetan = c.G_UNICODE_SCRIPT_TIBETAN,
    Tifinagh = c.G_UNICODE_SCRIPT_TIFINAGH,
    Tirhuta = c.G_UNICODE_SCRIPT_TIRHUTA,
    Toto = c.G_UNICODE_SCRIPT_TOTO,
    Ugaritic = c.G_UNICODE_SCRIPT_UGARITIC,
    Unknown = c.G_UNICODE_SCRIPT_UNKNOWN,
    Vai = c.G_UNICODE_SCRIPT_VAI,
    Vithkuqi = c.G_UNICODE_SCRIPT_VITHKUQI,
    Wancho = c.G_UNICODE_SCRIPT_WANCHO,
    WarangCiti = c.G_UNICODE_SCRIPT_WARANG_CITI,
    Yezidi = c.G_UNICODE_SCRIPT_YEZIDI,
    Yi = c.G_UNICODE_SCRIPT_YI,
    ZanabazarSquare = c.G_UNICODE_SCRIPT_ZANABAZAR_SQUARE,
};

pub const UnicodeType = enum(c_int) {
    ClosePunctuation = c.G_UNICODE_CLOSE_PUNCTUATION,
    ConnectPunctuation = c.G_UNICODE_CONNECT_PUNCTUATION,
    Control = c.G_UNICODE_CONTROL,
    CurrencySymbol = c.G_UNICODE_CURRENCY_SYMBOL,
    DashPunctuation = c.G_UNICODE_DASH_PUNCTUATION,
    DecimalNumber = c.G_UNICODE_DECIMAL_NUMBER,
    EnclosingMark = c.G_UNICODE_ENCLOSING_MARK,
    FinalPunctuation = c.G_UNICODE_FINAL_PUNCTUATION,
    Format = c.G_UNICODE_FORMAT,
    InitialPunctuation = c.G_UNICODE_INITIAL_PUNCTUATION,
    LetterNumber = c.G_UNICODE_LETTER_NUMBER,
    LineSeparator = c.G_UNICODE_LINE_SEPARATOR,
    LowercaseLetter = c.G_UNICODE_LOWERCASE_LETTER,
    MathSymbol = c.G_UNICODE_MATH_SYMBOL,
    ModifierLetter = c.G_UNICODE_MODIFIER_LETTER,
    ModifierSymbol = c.G_UNICODE_MODIFIER_SYMBOL,
    NonSpacingMark = c.G_UNICODE_NON_SPACING_MARK,
    OpenPunctuation = c.G_UNICODE_OPEN_PUNCTUATION,
    OtherLetter = c.G_UNICODE_OTHER_LETTER,
    OtherNumber = c.G_UNICODE_OTHER_NUMBER,
    OtherPunctuation = c.G_UNICODE_OTHER_PUNCTUATION,
    OtherSymbol = c.G_UNICODE_OTHER_SYMBOL,
    ParagraphSeparator = c.G_UNICODE_PARAGRAPH_SEPARATOR,
    PrivateUse = c.G_UNICODE_PRIVATE_USE,
    SpaceSeparator = c.G_UNICODE_SPACE_SEPARATOR,
    SpacingMark = c.G_UNICODE_SPACING_MARK,
    Surrogate = c.G_UNICODE_SURROGATE,
    TitlecaseLetter = c.G_UNICODE_TITLECASE_LETTER,
    Unassigned = c.G_UNICODE_UNASSIGNED,
    UppercaseLetter = c.G_UNICODE_UPPERCASE_LETTER,
};

pub const UriError = enum(c_int) {
    BadAuthParams = c.G_URI_ERROR_BAD_AUTH_PARAMS,
    BadFragment = c.G_URI_ERROR_BAD_FRAGMENT,
    BadHost = c.G_URI_ERROR_BAD_HOST,
    BadPassword = c.G_URI_ERROR_BAD_PASSWORD,
    BadPath = c.G_URI_ERROR_BAD_PATH,
    BadPort = c.G_URI_ERROR_BAD_PORT,
    BadQuery = c.G_URI_ERROR_BAD_QUERY,
    BadScheme = c.G_URI_ERROR_BAD_SCHEME,
    BadUser = c.G_URI_ERROR_BAD_USER,
    Failed = c.G_URI_ERROR_FAILED,
};

pub const UserDirectory = enum(c_int) {
    DirectoryDesktop = c.G_USER_DIRECTORY_DESKTOP,
    DirectoryDocuments = c.G_USER_DIRECTORY_DOCUMENTS,
    DirectoryDownload = c.G_USER_DIRECTORY_DOWNLOAD,
    DirectoryMusic = c.G_USER_DIRECTORY_MUSIC,
    DirectoryPictures = c.G_USER_DIRECTORY_PICTURES,
    DirectoryPublicShare = c.G_USER_DIRECTORY_PUBLIC_SHARE,
    DirectoryTemplates = c.G_USER_DIRECTORY_TEMPLATES,
    DirectoryVideos = c.G_USER_DIRECTORY_VIDEOS,
    NDirectories = c.G_USER_N_DIRECTORIES,
};

pub const VariantClass = enum(c_int) {
    Array = c.G_VARIANT_CLASS_ARRAY,
    Boolean = c.G_VARIANT_CLASS_BOOLEAN,
    Byte = c.G_VARIANT_CLASS_BYTE,
    DictEntry = c.G_VARIANT_CLASS_DICT_ENTRY,
    Double = c.G_VARIANT_CLASS_DOUBLE,
    Handle = c.G_VARIANT_CLASS_HANDLE,
    Int16 = c.G_VARIANT_CLASS_INT16,
    Int32 = c.G_VARIANT_CLASS_INT32,
    Int64 = c.G_VARIANT_CLASS_INT64,
    Maybe = c.G_VARIANT_CLASS_MAYBE,
    ObjectPath = c.G_VARIANT_CLASS_OBJECT_PATH,
    Signature = c.G_VARIANT_CLASS_SIGNATURE,
    String = c.G_VARIANT_CLASS_STRING,
    Tuple = c.G_VARIANT_CLASS_TUPLE,
    Uint16 = c.G_VARIANT_CLASS_UINT16,
    Uint32 = c.G_VARIANT_CLASS_UINT32,
    Uint64 = c.G_VARIANT_CLASS_UINT64,
    Variant = c.G_VARIANT_CLASS_VARIANT,
};

pub const VariantParseError = enum(c_int) {
    BasicTypeExpected = c.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED,
    CannotInferType = c.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE,
    DefiniteTypeExpected = c.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED,
    Failed = c.G_VARIANT_PARSE_ERROR_FAILED,
    InputNotAtEnd = c.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END,
    InvalidCharacter = c.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER,
    InvalidFormatString = c.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING,
    InvalidObjectPath = c.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH,
    InvalidSignature = c.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE,
    InvalidTypeString = c.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING,
    NoCommonType = c.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE,
    NumberOutOfRange = c.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE,
    NumberTooBig = c.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG,
    Recursion = c.G_VARIANT_PARSE_ERROR_RECURSION,
    TypeError = c.G_VARIANT_PARSE_ERROR_TYPE_ERROR,
    UnexpectedToken = c.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN,
    UnknownKeyword = c.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD,
    UnterminatedStringConstant = c.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT,
    ValueExpected = c.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED,
};


test {
    std.testing.refAllDecls(@This());
}